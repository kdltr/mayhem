(define-record-type signal
  (%make-signal receptors emitters parents function thread initial-value)
  signal?
  (receptors receptors receptors-set!)
  (emitters emitters emitters-set!)
  (parents parents)
  (function signal-function)
  (thread signal-thread signal-thread-set!)
  (initial-value signal-initial-value))

(define (signal-loop sig)
  (lambda ()
    (let loop ((state (signal-initial-value sig)))
      (let* ((inputs (map mailbox-receive! (receptors sig)))
             (out-msg (apply (signal-function sig) state inputs))
             (new-state (body-of out-msg)))
        (broadcast! (emitters sig) out-msg)
        (loop new-state)))))

(define (make-registered-signal parents function init)
  (let* ((channels (map (lambda (_) (make-mailbox)) parents))
         (sig (%make-signal channels '() parents function #f init))
         (signal-thunk (signal-loop sig)))
    (for-each register-emitter! parents channels)
    (signal-thread-set! sig (make-thread signal-thunk))
    sig))
